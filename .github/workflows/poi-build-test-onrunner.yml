name: Poi-Build-Runner

env:
  apiname: poi
  repo: devopsoh/api-poi
  acrreg: openhacklnc01aacr
  acrsite: openhacklnc01aacr.azurecr.io
  tenant: ${{ secrets.tenant }}
  AZURE_WEBAPP_NAME: openhacklnc01apoi   # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.' 
  artifact-name:  poiapp
  #dotnetversion:  '2.1.x'
  dotnetversion: '3.1.202' # use with revison
  RG: openhacklnc01arg

on:
  workflow_dispatch:
  push:
    branches: [ '*' ]
    paths: 
      - apis/poi/**  
      - .github/workflows/poi-build-test-onrunner.yml
  pull_request:
    branches: [ master ]
    paths: 
      - apis/poi/**
      - .github/workflows/poi-build-native.yml



jobs:
  build_and_test_poi_native:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apis/poi

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # larry@LNC-SLaptop3:/mnt/c/Users/laclama/MyDev/1-OpenHack/DevOps2 Coaching Nov 2020/github/apis/poi$ dotnet nuget locals all -l
      # http-cache: /home/larry/.local/share/NuGet/v3-cache
      # global-packages: /home/larry/.nuget/packages/
      # temp: /tmp/NuGetScratch
      # plugins-cache: /home/larry/.local/share/NuGet/plugins-cache


      - name: Cache nuget cache
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-${{github.workflow}}nuget-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{github.workflow}}nuget-

      - name: Cache .NET cache
        uses: actions/cache@v2
        with:
          path: ~/.dotnet
          key: ${{ runner.os }}-${{github.workflow}}dotnet-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{github.workflow}}dotnet-


      - uses: actions/setup-dotnet@v1
        id: setupdotnet
        with:
          dotnet-version: ${{env.dotnetversion}} # SDK Version to use; 


      # - name: showcache
      #   run: dotnet nuget locals all -l

      - run: |
          pwd
          ls -l 
  #    - name: Add Code Coverage Tools
  #      working-directory: tests/UnitTests
  #      run: dotnet add package coverlet.msbuild
      - name: add junit logger
        run: |
          pwd
          dotnet add package JunitXml.TestLogger --version 3.0.98
        working-directory: apis/poi/tests/UnitTests

      - name: Install dependencies
        run: dotnet restore web/*.csproj

      - name: .NET Build Web
        run: dotnet build --configuration Release --no-restore web/*.csproj

      - name: .NET Build Unit Tests
        run: dotnet build --configuration Release tests/UnitTests/UnitTests.csproj

      - name: .NET Test
        run: |
          dotnet test --no-restore --verbosity normal tests/UnitTests  --logger:"junit;LogFilePath=junittest-result.xml"
          # the above will create a file in the same dir as the csproj file, eg tests/UnitTests


      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        # if: always()
        with:
          files: apis/poi/tests/UnitTests/junittest-result.xml

      - name: .NET Publish
        run: dotnet publish -c Release --no-restore web/poi.csproj -o poiapp

      # - run: |
      #     pwd
      #     echo
      #     ls -l
      #     echo
      #     ls -l poiapp

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact-name}}
          path: 'apis/poi/poiapp' # or path/to/artifact

      - name: create issue if build & test failed
        if: failure()
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          title="${{ env.apiname }} Workflow ${{ github.run_number }} Failed! "
          body="${{ env.apiname }} Workflow Failure 
          Build Number: ${{ github.run_number }} 
          Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} 
          SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})"
          gh issue create --title "$title" --body "$body"

  BuildDocker:
    runs-on: self-hosted
    needs:   build_and_test_poi_native
    steps: 

    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.artifact-name}}
        path: poiapp 



    # - name: Create Dockerfile
    #   run: |
    #     cat >Dockerfile <<EOF
    #     FROM mcr.microsoft.com/dotnet/aspnet:2.1 
    #     WORKDIR /app

    #     ENV SQL_USER="YourUserName" \
    #     SQL_PASSWORD="changeme" \
    #     SQL_SERVER="changeme.database.windows.net" \
    #     SQL_DBNAME="mydrivingDB" \
    #     WEB_PORT="8080" \
    #     WEB_SERVER_BASE_URI="http://0.0.0.0" \
    #     ASPNETCORE_ENVIRONMENT="Production"

    #     COPY poiapp .

    #     ENTRYPOINT ["dotnet", "poi.dll"]
    #     EOF

    # - name: Build docker image using artifact
    #   run: |
    #     docker build -t $acrsite/$repo:${{github.run_number}} --build-arg build_version=${{github.run_number}} .
    #     docker images


#    - uses: azure/login@v1
#      name: Azure Login
#      with:
#        creds: ${{ secrets.AZURE_CREDENTIALS }} 



    - run: ls -l
    # Build container image without Dockerfile!
    - name: Build container image using Buildah 
      uses: redhat-actions/buildah-build@v2
      with:
        image:  ${{env.acrsite}}/${{env.repo}}
        tags: ${{github.run_number}} ${{ github.sha }}
        #workdir: /app/
        build-args: |
          build_version=${{github.run_number}}
        base-image: mcr.microsoft.com/dotnet/aspnet:3.1
        entrypoint: |
          dotnet
          poi.dll
        envs: |
          SQL_USER=YourUserName
          SQL_PASSWORD=changeme
          SQL_SERVER=changeme.database.windows.net
          SQL_DBNAME=mydrivingDB
          WEB_PORT=8080
          WEB_SERVER_BASE_URI=http://0.0.0.0
          ASPNETCORE_ENVIRONMENT=Production
          APP_VERSION=${{github.run_number}}
        content: |
          poiapp

    - run: |
        buildah images
        buildah copy $acrsite/$repo:${{github.run_number}} poiapp /app
#
    - name: Push image to registry
      run: |
        #az acr login -n ${{env.acrreg}}
         buildah push $acrsite/$repo:${{github.run_number}}

  DeploytoStaging:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs:   BuildDocker
    steps:     


    # azure/login requires a GH Secret named AZURE_CREDENTIALS
    # which is a json object of the format:
    # {
    # "clientId": "<GUID>",
    # "clientSecret": "<GUID>",
    # "subscriptionId": "<GUID>",
    # "tenantId": "<GUID>",
    # (...)
    # }

    - uses: azure/login@v1
      name: Azure Login
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} 

### NOTE:  MUST add service principal as contributor to web app (or RG)
    # - name: 'Deploy to Azure Web App for Container Staging Slot'
    #   uses: azure/webapps-deploy@v2
    #   with: 
    #     app-name: ${{ env.AZURE_WEBAPP_NAME }}
    #     package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/poiapp'
       # slot-name: staging 


    - name: 'Deploy to Azure Web App'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        images: ${{env.acrsite}}/${{env.repo}}:${{github.run_number}}
        slot-name: staging
      
    - name: create issue if deploy fails
      if: failure()
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      run: |
        title="${{ env.apiname }} Workflow ${{ github.run_number }} Failed! "
        body="${{ env.apiname }} Workflow Failure  -- deploy to staging
        Build Number: ${{ github.run_number }} 
        Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} 
        SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})"
        gh issue create --title "$title" --body "$body"       


  Swap:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: swap
    needs:   DeploytoStaging
    steps: 

    - uses: azure/login@v1
      name: Azure Login
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} 

    - name: Swap Slots
      run: >
        az webapp deployment slot swap -g ${{env.RG}} -n ${{ env.AZURE_WEBAPP_NAME }} 
        --slot staging  --target-slot production


    
