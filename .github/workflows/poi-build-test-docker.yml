name: Poi-Build-Docker

env:
  apiname: poi
  repo: devopsoh/api-poi
  acrreg: openhack67r2z5h4acr
  acrsite: openhack67r2z5h4acr.azurecr.io
  tenant: ${{ secrets.tenant }}
  AZURE_WEBAPP_NAME: openhack67r2z5h4poi   # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.' 
  artifact-name:  poiapp
  #dotnetversion:  '2.1.x'
  dotnetversion: '3.1.202' # use with revison
  RG: openhack67r2z5h4rg
  Dockerfile:  Dockerfile-poi 

on:
  workflow_dispatch:
  push:
    branches: [ '*' ]
    paths: 
      - apis/poi/**  
      - .github/workflows/poi-build-test-docker.yml
  pull_request:
    branches: [ master ]
    paths: 
      - apis/poi/**
      - .github/workflows/poi-build-native.yml

jobs:
  build_and_test_poi_docker:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: apis/poi

    steps:
      - uses: actions/checkout@v2  

      # - name: Build docker image 
      #   run: |
      #     docker build -t $acrsite/$repo:${{github.run_number}} --build-arg build_version=${{github.run_number}} -f Dockerfile-poi .
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - uses: azure/login@v1
        name: Azure Login
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} 

      - name: Docker Build and push
        uses: docker/build-push-action@v2
        with:
          context: apis/poi 
          file: apis/poi/${{env.Dockerfile}}
          push: true
          tags: ${{env.acrsite}}/${{env.repo}}:${{github.run_number}}
          build-args: build_version=${{github.run_number}}


      # - name: Container image scan
      #   uses: Azure/container-scan@v0.1
      #   with:
      #     image-name: ${{env.acrsite}}/${{env.repo}}:${{github.run_number}}
      #     # Minimum severities of vulnerabilities to be displayed (UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL)
      #     severity-threshold: CRITICAL # optional, default is HIGH



      # - name: Push Docker image to registry
      #   run: |
      #     az acr login -n ${{env.acrreg}}
      #     docker push $acrsite/$repo:${{github.run_number}}

      - name: create issue if build & test failed
        if: failure()
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          title="${{ env.apiname }} Workflow ${{ github.run_number }} Failed! "
          body="${{ env.apiname }} Workflow Failure 
          Build Number: ${{ github.run_number }} 
          Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} 
          SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})"
          gh issue create --title "$title" --body "$body"

  DeploytoStaging:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs:   build_and_test_poi_docker
    steps:     


    # azure/login requires a GH Secret named AZURE_CREDENTIALS
    # which is a json object of the format:
    # {
    # "clientId": "<GUID>",
    # "clientSecret": "<GUID>",
    # "subscriptionId": "<GUID>",
    # "tenantId": "<GUID>",
    # (...)
    # }

    - uses: azure/login@v1
      name: Azure Login
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} 

### NOTE:  MUST add service principal as contributor to web app (or RG)
    # - name: 'Deploy to Azure Web App for Container Staging Slot'
    #   uses: azure/webapps-deploy@v2
    #   with: 
    #     app-name: ${{ env.AZURE_WEBAPP_NAME }}
    #     package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/poiapp'
        # slot-name: staging 


    - name: 'Deploy to Azure Web App'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        images: ${{env.acrsite}}/${{env.repo}}:${{github.run_number}}
        slot-name: staging
      
    - name: create issue if deploy fails
      if: failure()
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      run: |
        title="${{ env.apiname }} Workflow ${{ github.run_number }} Failed! "
        body="${{ env.apiname }} Workflow Failure  -- deploy to staging
        Build Number: ${{ github.run_number }} 
        Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} 
        SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})"
        gh issue create --title "$title" --body "$body"       


  Swap:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: swap
    needs:   DeploytoStaging
    steps: 

    - uses: azure/login@v1
      name: Azure Login
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} 

    - name: Swap Slots
      run: >
        az webapp deployment slot swap -g ${{env.RG}} -n ${{ env.AZURE_WEBAPP_NAME }} 
        --slot staging  --target-slot production


    
